# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-04 21:00
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasicUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Essay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='EssayFill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('essay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Essay')),
            ],
        ),
        migrations.CreateModel(
            name='EssayMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='EssayMethodFill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('essay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.EssayFill')),
                ('essay_method', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='internal.EssayMethod')),
            ],
        ),
        migrations.CreateModel(
            name='EssayMethodParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('unit', models.CharField(max_length=20)),
                ('value', models.CharField(max_length=20)),
                ('uncertainty', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ExternalProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalProviderService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('quantity', models.PositiveIntegerField()),
                ('location', models.CharField(max_length=200)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Inventory')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('essay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.EssayFill')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryOrderDefault',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Laboratory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('capacity', models.PositiveIntegerField()),
                ('essay_methods', models.ManyToManyField(related_name='laboratories', to='internal.EssayMethod')),
                ('inventory', models.ManyToManyField(related_name='laboratories', to='internal.Inventory')),
            ],
        ),
        migrations.CreateModel(
            name='LaboratoryServiceHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.PositiveIntegerField()),
                ('end_time', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Quotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RequestAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('permissions', models.ManyToManyField(to='auth.Permission')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Inventory')),
            ],
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceContract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceContractModification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.ServiceContract')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observations', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequestState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('basicuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='internal.BasicUser')),
                ('code', models.CharField(max_length=10)),
                ('doc_number', models.IntegerField()),
                ('phone_number', models.CharField(max_length=20)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('internal.basicuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('basicuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='internal.BasicUser')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('internal.basicuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='servicerequest',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.ServiceRequestState'),
        ),
        migrations.AddField(
            model_name='servicecontract',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.ServiceRequest'),
        ),
        migrations.AddField(
            model_name='sample',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.ServiceRequest'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sample_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.SampleType'),
        ),
        migrations.AddField(
            model_name='requestattachment',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.ServiceRequest'),
        ),
        migrations.AddField(
            model_name='quotation',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.ServiceRequest'),
        ),
        migrations.AddField(
            model_name='laboratory',
            name='service_hours',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.LaboratoryServiceHours'),
        ),
        migrations.AddField(
            model_name='externalprovider',
            name='services',
            field=models.ManyToManyField(to='internal.ExternalProviderService'),
        ),
        migrations.AddField(
            model_name='essaymethodfill',
            name='external_provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='internal.ExternalProvider'),
        ),
        migrations.AddField(
            model_name='essaymethodfill',
            name='inventory_order',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='internal.InventoryOrder'),
        ),
        migrations.AddField(
            model_name='essaymethod',
            name='parameters',
            field=models.ManyToManyField(related_name='essaymethods', to='internal.EssayMethodParameter'),
        ),
        migrations.AddField(
            model_name='essayfill',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Sample'),
        ),
        migrations.AddField(
            model_name='basicuser',
            name='roles',
            field=models.ManyToManyField(to='internal.Role'),
        ),
        migrations.AddField(
            model_name='servicerequest',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Client'),
        ),
        migrations.AddField(
            model_name='servicerequest',
            name='supervisor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Employee'),
        ),
        migrations.AddField(
            model_name='servicecontract',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Client'),
        ),
        migrations.AddField(
            model_name='laboratory',
            name='employees',
            field=models.ManyToManyField(related_name='laboratories', to='internal.Employee'),
        ),
        migrations.AddField(
            model_name='laboratory',
            name='supervisor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='internal.Employee'),
        ),
        migrations.AddField(
            model_name='employee',
            name='assigned_essay_methods',
            field=models.ManyToManyField(related_name='employees', to='internal.EssayMethodFill'),
        ),
        migrations.AddField(
            model_name='employee',
            name='essay_methods',
            field=models.ManyToManyField(related_name='employees', to='internal.EssayMethod'),
        ),
    ]
